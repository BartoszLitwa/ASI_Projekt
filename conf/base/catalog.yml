# Here you can define all your data sets by using simple YAML syntax.
#
# Documentation for this file format can be found in "The Data Catalog"
# Link: https://docs.kedro.org/en/stable/data/data_catalog.html
#
# We support interacting with a variety of data stores including local file systems, cloud, network and HDFS
#
# An example data set definition can look as follows:
#
#bikes:
#  type: pandas.CSVDataset
#  filepath: "data/01_raw/bikes.csv"
#
#weather:
#  type: spark.SparkDataset
#  filepath: s3a://your_bucket/data/01_raw/weather*
#  file_format: csv
#  credentials: dev_s3
#  load_args:
#    header: True
#    inferSchema: True
#  save_args:
#    sep: '|'
#    header: True
#
#scooters:
#  type: pandas.SQLTableDataset
#  credentials: scooters_credentials
#  table_name: scooters
#  load_args:
#    index_col: ['name']
#    columns: ['name', 'gear']
#  save_args:
#    if_exists: 'replace'
#    # if_exists: 'fail'
#    # if_exists: 'append'
#
# The Data Catalog supports being able to reference the same file using two different Dataset implementations
# (transcoding), templating and a way to reuse arguments that are frequently repeated. See more here:
# https://docs.kedro.org/en/stable/data/data_catalog.html

# Raw data
loan_data:
  type: pandas.CSVDataset
  filepath: data/01_raw/loan_data.csv

# Data preparation outputs
train_data:
  type: pandas.CSVDataset
  filepath: data/02_intermediate/loan_train.csv
  save_args:
    index: false
    
test_data:
  type: pandas.CSVDataset
  filepath: data/02_intermediate/loan_test.csv
  save_args:
    index: false

# Data cleaning outputs
train_cleaned:
  type: pandas.CSVDataset
  filepath: data/03_primary/loan_train_cleaned.csv
  save_args:
    index: false
    
test_cleaned:
  type: pandas.CSVDataset
  filepath: data/03_primary/loan_test_cleaned.csv
  save_args:
    index: false

# Feature engineering outputs
train_features:
  type: pandas.CSVDataset
  filepath: data/04_feature/loan_train_features.csv
  save_args:
    index: false
    
test_features:
  type: pandas.CSVDataset
  filepath: data/04_feature/loan_test_features.csv
  save_args:
    index: false

# Model outputs
model:
  type: pickle.PickleDataset
  filepath: data/06_models/loan_model.pkl

model_features:
  type: pickle.PickleDataset
  filepath: data/06_models/model_features.pkl

optimal_threshold:
  type: pickle.PickleDataset
  filepath: data/06_models/optimal_threshold.pkl

# Evaluation outputs
model_metrics:
  type: json.JSONDataset
  filepath: data/06_models/model_metrics.json

# Legacy datasets (kept for compatibility)
loan_cleaned:
  type: pandas.CSVDataset
  filepath: data/02_intermediate/loan_cleaned.csv

loan_features:
  type: pandas.CSVDataset
  filepath: data/04_feature/loan_features.csv

loan_model_input:
  type: pandas.CSVDataset
  filepath: data/05_model_input/loan_model_input.csv

cleaned_data:
  type: pandas.ParquetDataset
  filepath: data/02_intermediate/cleaned_data.parquet

no_outliers_data:
  type: pandas.ParquetDataset
  filepath: data/02_intermediate/no_outliers.parquet

no_missing_data:
  type: pandas.ParquetDataset
  filepath: data/02_intermediate/no_missing.parquet

featured_data:
  type: pandas.ParquetDataset
  filepath: data/03_primary/featured.parquet

balanced_data:
  type: pandas.ParquetDataset
  filepath: data/03_primary/balanced.parquet

model_accuracy:
  type: MemoryDataset